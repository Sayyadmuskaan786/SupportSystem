{"ast":null,"code":"var _jsxFileName = \"/home/muskaan/Desktop/Summer_Internship/new/src/AdminDashboard.js\",\n  _s = $RefreshSig$();\n// import React, { useState, useEffect } from 'react';\n// import AdminSidebar from './AdminSidebar';\n\n// function AdminDashboard({ token, userId }) {\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [users, setUsers] = useState([]);\n//   const [tickets, setTickets] = useState([]);\n//   const [openTickets, setOpenTickets] = useState([]);\n//   const [comments, setComments] = useState([]);\n//   const [newComment, setNewComment] = useState('');\n//   const [editCommentId, setEditCommentId] = useState(null);\n//   const [editCommentText, setEditCommentText] = useState('');\n//   const [selectedTicketAssign, setSelectedTicketAssign] = useState(null);\n//   const [selectedAgent, setSelectedAgent] = useState(null);\n//   const [availableAgents, setAvailableAgents] = useState([]);\n//   const [showTickets, setShowTickets] = useState(true);\n//   const [activeSection, setActiveSection] = useState('viewUsers');\n//   const [profile, setProfile] = useState(null);\n\n//   useEffect(() => {\n//     console.log(\"useEffect triggered for activeSection:\", activeSection);\n//     if (!token) return;\n//     if (activeSection === 'viewComments') {\n//       console.log(\"Fetching comments for admin view\");\n//       setLoading(true);\n//       const authHeader = `Bearer ${token}`;\n//       // Make a GET request to the comments API endpoint with the authorization header\n//       // This fetches all comments for the admin view\n//       fetch('http://localhost:8080/api/comments/getcomments', {\n//         headers: { Authorization: authHeader }\n//       })\n//         // Check if the response is successful (status code 200-299)\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch comments');\n//           // Parse the response body as JSON\n//           return res.json();\n//         })\n//         .then(data => {\n//           // Update the comments state with the fetched data\n//           setComments(data);\n//           // Clear any previous error messages\n//           setError(null);\n//         })\n//         // Catch and handle any errors during the fetch or processing\n//         .catch(err => setError(err.message))\n//         // Finally, set loading to false to indicate fetch completion\n//         .finally(() => setLoading(false));\n//     } else {\n//       setLoading(true);\n//       const authHeader = `Bearer ${token}`;\n\n//       // Fetch users\n//       fetch('http://localhost:8080/api/users', {\n//         headers: { Authorization: authHeader },\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch users');\n//           return res.json();\n//         })\n//         .then(data => {\n//           setUsers(data);\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message))\n//         .finally(() => setLoading(false));\n\n//       // Fetch tickets\n//       // Make a GET request to the tickets API endpoint with the authorization header\n//       // This fetches all tickets for the admin dashboard\n//       fetch('http://localhost:8080/api/tickets/gettickets', {\n//         headers: { Authorization: authHeader },\n//       })\n//         // Check if the response is successful (status code 200-299)\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch tickets');\n//           // Parse the response body as JSON\n//           return res.json();\n//         })\n//         .then(data => {\n//           // Update the tickets state with the fetched data\n//           setTickets(data);\n//           // Filter tickets with state 'OPEN' and update openTickets state\n//           setOpenTickets(data.filter(ticket => ticket.state === 'OPEN'));\n//           // Clear any previous error messages\n//           setError(null);\n//         })\n//         // Catch and handle any errors during the fetch or processing\n//         .catch(err => setError(err.message))\n//         // Finally, set loading to false to indicate fetch completion\n//         .finally(() => setLoading(false));\n//     }\n//   }, [token, activeSection]);\n\n//   useEffect(() => {\n//     if (activeSection === 'viewProfile' && userId && token) {\n//       setLoading(true);\n//       fetch(`http://localhost:8080/api/users/${userId}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch profile');\n//           return res.json();\n//         })\n//         .then(data => {\n//           setProfile(data);\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message))\n//         .finally(() => setLoading(false));\n//     }\n//   }, [activeSection, userId, token]);\n\n//   // Fetch all agents\n//   useEffect(() => {\n//     if (!token) return;\n//     const authHeader = `Bearer ${token}`;\n//     fetch('http://localhost:8080/api/users/agents', {\n//       headers: { Authorization: authHeader },\n//     })\n//       .then(res => {\n//         if (!res.ok) throw new Error('Failed to fetch agents');\n//         return res.json();\n//       })\n//       .then(data => {\n//         setAvailableAgents(data);\n//         setError(null);\n//       })\n//       .catch(err => setError(err.message));\n//   }, [token]);\n\n//   // Add a comment\n//   const handleAddComment = () => {\n//     if (newComment.trim() && selectedTicketAssign) {\n//       fetch('http://localhost:8080/api/comments', {\n//         method: 'POST',\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           content: newComment,\n//           ticket: { id: selectedTicketAssign },\n//         }),\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to add comment');\n//           return res.json();\n//         })\n//         .then(newCommentData => {\n//           setComments(prev => [...prev, newCommentData]);\n//           setNewComment('');\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message));\n//     }\n//   };\n\n//   // Edit comment preparation\n//   const handleEditComment = (commentId, text) => {\n//     setEditCommentId(commentId);\n//     setEditCommentText(text);\n//   };\n\n//   // Update comment\n//   const handleUpdateComment = () => {\n//     if (editCommentText.trim() && editCommentId !== null) {\n//       fetch(`http://localhost:8080/api/comments/${editCommentId}`, {\n//         method: 'PUT',\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ content: editCommentText }),\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to update comment');\n//           return res.json();\n//         })\n//         .then(updatedComment => {\n//           setComments(prev =>\n//             prev.map(comment =>\n//               comment.id === editCommentId ? updatedComment : comment\n//             )\n//           );\n//           setEditCommentId(null);\n//           setEditCommentText('');\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message));\n//     }\n//   };\n\n//   // Delete comment\n//   const deleteComment = (id) => {\n//     fetch(`http://localhost:8080/api/comments/${id}`, {\n//       method: 'DELETE',\n//       headers: { Authorization: `Bearer ${token}` },\n//     })\n//       .then(() => setComments(comments.filter(comment => comment.id !== id)))\n//       .catch(err => setError(err.message));\n//   };\n\n//   // Assign ticket to agent\n//   const assignTicket = () => {\n//     if (selectedTicketAssign && selectedAgent) {\n//       fetch(`http://localhost:8080/api/tickets/${selectedTicketAssign}/assign/${selectedAgent}`, {\n//         method: 'PUT',\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'application/json',\n//         },\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to assign ticket');\n//           setTickets(prev =>\n//             prev.map(ticket =>\n//               ticket.id === parseInt(selectedTicketAssign)\n//                 ? { ...ticket, assignedAgent: { id: parseInt(selectedAgent) } }\n//                 : ticket\n//             )\n//           );\n//           setSelectedTicketAssign(null);\n//           setSelectedAgent(null);\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message));\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex min-h-screen font-poppins bg-gray-100\">\n//       <AdminSidebar onSelect={setActiveSection} />\n//       <main className=\"flex-grow p-8 ml-64 max-w-6xl mx-auto\">\n\n//         {error && <p className=\"text-red-600 mb-4\">{error}</p>}\n\n//         {activeSection === 'viewUsers' && (\n//           <section className=\"mb-8\">\n//             <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Users</h2>\n//             <table className=\"min-w-full bg-white border border-gray-300 rounded\">\n//               <thead>\n//                 <tr>\n//                   <th className=\"border px-4 py-2 text-left\">ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Username</th>\n//                   <th className=\"border px-4 py-2 text-left\">Role</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {users.map(user => (\n//                   <tr key={user.id} className=\"hover:bg-gray-100\">\n//                     <td className=\"border px-4 py-2\">{user.id}</td>\n//                     <td className=\"border px-4 py-2\">{user.username}</td>\n//                     <td className=\"border px-4 py-2 capitalize\">{user.role}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </section>\n//         )}\n\n//         {activeSection === 'viewTickets' && (\n//           <>\n//             <section className=\"mb-8\">\n//               <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Tickets (Total: {tickets.length})</h2>\n//               <table className=\"min-w-full bg-white border border-gray-300 rounded\">\n//               <thead>\n//                 <tr>\n//                   <th className=\"border px-4 py-2 text-left\">ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Title</th>\n//                   <th className=\"border px-4 py-2 text-left\">Description</th>\n//                   <th className=\"border px-4 py-2 text-left\">Status</th>\n//                   <th className=\"border px-4 py-2 text-left\">Created By ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Agent ID</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {tickets.map(ticket => (\n//                   <tr key={ticket.id} className=\"hover:bg-gray-100\">\n//                     <td className=\"border px-4 py-2\">{ticket.id}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.title}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.description}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.state}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.createdBy ? ticket.createdBy.id : 'null'}</td>\n//                     <td className=\"border px-4 py-2\">\n//                       {ticket.assignedAgent\n//                         ? ticket.assignedAgent.id\n//                         : ticket.state === 'ASSIGNED'\n//                         ? 'Assigned'\n//                         : 'Unassigned'}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//               </table>\n//             </section>\n//           </>\n//         )}\n\n//         {activeSection === 'assignTickets' && (\n//           <section className=\"mb-8\">\n//             <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Assign Tickets</h2>\n//             <div className=\"mb-4\">\n//               <label htmlFor=\"ticketSelect\" className=\"block mb-1 font-medium\">Select Ticket</label>\n//               <select\n//                 id=\"ticketSelect\"\n//                 value={selectedTicketAssign || ''}\n//                 onChange={(e) => setSelectedTicketAssign(e.target.value)}\n//                 className=\"border border-gray-300 rounded px-3 py-2 w-full max-w-xs\"\n//               >\n//                 <option value=\"\" disabled>Select a ticket</option>\n//                 {openTickets.map(ticket => (\n//                   <option key={ticket.id} value={ticket.id}>\n//                     {ticket.title} (Assigned to: {ticket.assignedAgent ? ticket.assignedAgent.username : 'Unassigned'})\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"mb-4\">\n//               <label htmlFor=\"agentSelect\" className=\"block mb-1 font-medium\">Assign to Agent</label>\n//               <select\n//                 id=\"agentSelect\"\n//                 value={selectedAgent || ''}\n//                 onChange={(e) => setSelectedAgent(e.target.value)}\n//                 className=\"border border-gray-300 rounded px-3 py-2 w-full max-w-xs\"\n//               >\n//                 <option value=\"\" disabled>Select an agent</option>\n//                 {availableAgents.map(agent => (\n//                   <option key={agent.id} value={agent.id}>{agent.username}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <button\n//               onClick={assignTicket}\n//               disabled={!selectedTicketAssign || !selectedAgent}\n//               className=\"bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50\"\n//             >\n//               Assign Ticket\n//             </button>\n//           </section>\n//         )}\n\n//         {activeSection === 'viewProfile' && (\n//           <section className=\"mb-8 flex flex-col items-center justify-center\">\n//             <h2 className=\"text-3xl font-semibold mb-6 text-blue-800\">Profile</h2>\n//             {loading && <p>Loading profile...</p>}\n//             {error && <p className=\"text-red-600\">{error}</p>}\n//             {profile && (\n//               <div className=\"flex flex-col items-center bg-white p-8 rounded-lg shadow-lg w-full max-w-md\">\n//                 <div className=\"mb-6\">\n//                 <div className=\"w-24 h-24 rounded-full bg-blue-600 flex items-center justify-center shadow-lg mx-auto overflow-hidden\">\n//                   <img\n//                     src=\"download.jpeg\"\n//                     alt=\"Profile Icon\"\n//                     className=\"w-full h-full object-cover\"\n//                   />\n//                 </div>\n//                 </div>\n//                 <div className=\"text-center\">\n//                   <p className=\"text-lg font-medium\"><strong>ID:</strong> {profile.id}</p>\n//                   <p className=\"text-lg font-medium\"><strong>Username:</strong> {profile.username}</p>\n//                   <p className=\"text-lg font-medium\"><strong>Email:</strong> {profile.email}</p>\n//                   <p className=\"text-lg font-medium\"><strong>Role:</strong> {profile.role}</p>\n//                 </div>\n//               </div>\n//             )}\n//           </section>\n//         )}\n\n//         {activeSection === 'viewComments' && (\n//           <section className=\"mb-8\">\n//             <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Comments</h2>\n//             <table className=\"min-w-full bg-white border border-gray-300 rounded\">\n//               <thead>\n//                 <tr>\n//                   <th className=\"border px-4 py-2 text-left\">ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Content</th>\n//                   <th className=\"border px-4 py-2 text-left\">Ticket ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">User ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {comments.map(comment => (\n//                   <tr key={comment.id} className=\"hover:bg-gray-100\">\n//                     <td className=\"border px-4 py-2\">{comment.id}</td>\n//                     <td className=\"border px-4 py-2\">{comment.content}</td>\n//                     <td className=\"border px-4 py-2\">{comment.ticket ? comment.ticket.id : 'N/A'}</td>\n//                     <td className=\"border px-4 py-2\">{comment.user ? comment.user.id : 'N/A'}</td>\n//                     <td className=\"border px-4 py-2\">\n//                       <button\n//                         onClick={() => handleEditComment(comment.id, comment.content)}\n//                         className=\"bg-yellow-400 text-white px-2 py-1 rounded mr-2\"\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         onClick={() => deleteComment(comment.id)}\n//                         className=\"bg-red-600 text-white px-2 py-1 rounded\"\n//                       >\n//                         Delete\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n\n//             {editCommentId !== null && (\n//               <div className=\"mt-4\">\n//                 <textarea\n//                   value={editCommentText}\n//                   onChange={(e) => setEditCommentText(e.target.value)}\n//                   className=\"w-full border border-gray-300 rounded p-2\"\n//                   rows={4}\n//                 />\n//                 <button\n//                   onClick={handleUpdateComment}\n//                   className=\"bg-blue-600 text-white px-4 py-2 rounded mt-2\"\n//                 >\n//                   Update Comment\n//                 </button>\n//                 <button\n//                   onClick={() => setEditCommentId(null)}\n//                   className=\"ml-2 bg-gray-400 text-white px-4 py-2 rounded mt-2\"\n//                 >\n//                   Cancel\n//                 </button>\n//               </div>\n//             )}\n//           </section>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default AdminDashboard;\n\nimport React, { useState, useEffect } from 'react';\nimport AdminSidebar from './AdminSidebar';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction AdminDashboard({\n  token,\n  userId\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [tickets, setTickets] = useState([]);\n  const [openTickets, setOpenTickets] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [editCommentId, setEditCommentId] = useState(null);\n  const [editCommentText, setEditCommentText] = useState('');\n  const [selectedTicketAssign, setSelectedTicketAssign] = useState(null);\n  const [selectedAgent, setSelectedAgent] = useState(null);\n  const [availableAgents, setAvailableAgents] = useState([]);\n  const [activeSection, setActiveSection] = useState('viewUsers');\n  const [profile, setProfile] = useState(null);\n  useEffect(() => {\n    if (!token) return;\n    const authHeader = `Bearer ${token}`;\n    if (activeSection === 'viewComments') {\n      setLoading(true);\n      fetch('http://localhost:8080/api/comments/getcomments', {\n        headers: {\n          Authorization: authHeader\n        }\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to fetch comments')).then(data => {\n        setComments(data);\n        setError(null);\n      }).catch(err => setError(err)).finally(() => setLoading(false));\n    } else {\n      setLoading(true);\n      fetch('http://localhost:8080/api/users', {\n        headers: {\n          Authorization: authHeader\n        }\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to fetch users')).then(data => setUsers(data)).catch(err => setError(err)).finally(() => setLoading(false));\n      fetch('http://localhost:8080/api/tickets/gettickets', {\n        headers: {\n          Authorization: authHeader\n        }\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to fetch tickets')).then(data => {\n        setTickets(data);\n        setOpenTickets(data.filter(t => t.state === 'OPEN'));\n      }).catch(err => setError(err)).finally(() => setLoading(false));\n    }\n  }, [token, activeSection]);\n  useEffect(() => {\n    if (activeSection === 'viewProfile' && userId && token) {\n      setLoading(true);\n      fetch(`http://localhost:8080/api/users/${userId}`, {\n        headers: {\n          Authorization: `Bearer ${token}`\n        }\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to fetch profile')).then(data => setProfile(data)).catch(err => setError(err)).finally(() => setLoading(false));\n    }\n  }, [activeSection, userId, token]);\n  useEffect(() => {\n    if (!token) return;\n    fetch('http://localhost:8080/api/users/agents', {\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(res => res.ok ? res.json() : Promise.reject('Failed to fetch agents')).then(data => setAvailableAgents(data)).catch(err => setError(err));\n  }, [token]);\n  const handleAddComment = () => {\n    if (newComment.trim() && selectedTicketAssign) {\n      fetch('http://localhost:8080/api/comments', {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: newComment,\n          ticket: {\n            id: selectedTicketAssign\n          }\n        })\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to add comment')).then(data => {\n        setComments(prev => [...prev, data]);\n        setNewComment('');\n      }).catch(err => setError(err));\n    }\n  };\n  const handleEditComment = (id, text) => {\n    setEditCommentId(id);\n    setEditCommentText(text);\n  };\n  const handleUpdateComment = () => {\n    if (editCommentText.trim() && editCommentId !== null) {\n      fetch(`http://localhost:8080/api/comments/${editCommentId}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          content: editCommentText\n        })\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to update comment')).then(data => {\n        setComments(prev => prev.map(c => c.id === editCommentId ? data : c));\n        setEditCommentId(null);\n        setEditCommentText('');\n      }).catch(err => setError(err));\n    }\n  };\n  const deleteComment = id => {\n    fetch(`http://localhost:8080/api/comments/${id}`, {\n      method: 'DELETE',\n      headers: {\n        Authorization: `Bearer ${token}`\n      }\n    }).then(() => setComments(prev => prev.filter(c => c.id !== id))).catch(err => setError(err));\n  };\n  const assignTicket = () => {\n    if (selectedTicketAssign && selectedAgent) {\n      fetch(`http://localhost:8080/api/tickets/${selectedTicketAssign}/assign/${selectedAgent}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      }).then(res => res.ok ? res.json() : Promise.reject('Failed to assign ticket')).then(() => {\n        setTickets(prev => prev.map(t => t.id === parseInt(selectedTicketAssign) ? {\n          ...t,\n          assignedAgent: {\n            id: parseInt(selectedAgent)\n          }\n        } : t));\n        setSelectedTicketAssign(null);\n        setSelectedAgent(null);\n      }).catch(err => setError(err));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex min-h-screen font-poppins bg-gray-100\",\n    children: [/*#__PURE__*/_jsxDEV(AdminSidebar, {\n      onSelect: setActiveSection\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: \"flex-grow p-8 ml-64 max-w-6xl mx-auto\",\n      children: [error && /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-red-600 mb-4\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 602,\n        columnNumber: 19\n      }, this), activeSection === 'viewUsers' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Users\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: users.map(u => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [u.username, \" - \", u.role]\n          }, u.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 605,\n            columnNumber: 50\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 605,\n          columnNumber: 30\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 605,\n        columnNumber: 11\n      }, this), activeSection === 'viewTickets' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Tickets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 16\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: tickets.map(t => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: t.title\n          }, t.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 609,\n            columnNumber: 54\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 609,\n          columnNumber: 32\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 609,\n        columnNumber: 11\n      }, this), activeSection === 'assignTickets' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Assign Tickets\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 614,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedTicketAssign || '',\n          onChange: e => setSelectedTicketAssign(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select a ticket\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 616,\n            columnNumber: 15\n          }, this), openTickets.map(t => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: t.id,\n            children: t.title\n          }, t.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 617,\n            columnNumber: 37\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 615,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: selectedAgent || '',\n          onChange: e => setSelectedAgent(e.target.value),\n          children: [/*#__PURE__*/_jsxDEV(\"option\", {\n            value: \"\",\n            disabled: true,\n            children: \"Select an agent\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 620,\n            columnNumber: 15\n          }, this), availableAgents.map(a => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: a.id,\n            children: a.username\n          }, a.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 621,\n            columnNumber: 41\n          }, this))]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: assignTicket,\n          children: \"Assign\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 623,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 613,\n        columnNumber: 11\n      }, this), activeSection === 'viewProfile' && profile && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Profile\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 629,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"ID: \", profile.id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 630,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Username: \", profile.username]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 631,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Email: \", profile.email]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 632,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Role: \", profile.role]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 633,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 628,\n        columnNumber: 11\n      }, this), activeSection === 'viewComments' && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Comments\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 639,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: comments.map(c => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: [editCommentId === c.id ? /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n                value: editCommentText,\n                onChange: e => setEditCommentText(e.target.value)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 645,\n                columnNumber: 23\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: handleUpdateComment,\n                children: \"Update\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 646,\n                columnNumber: 23\n              }, this)]\n            }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n              children: [c.content, \" \", /*#__PURE__*/_jsxDEV(\"button\", {\n                onClick: () => handleEditComment(c.id, c.content),\n                children: \"Edit\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 650,\n                columnNumber: 35\n              }, this)]\n            }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => deleteComment(c.id),\n              children: \"Delete\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 653,\n              columnNumber: 19\n            }, this)]\n          }, c.id, true, {\n            fileName: _jsxFileName,\n            lineNumber: 642,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 640,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          value: newComment,\n          onChange: e => setNewComment(e.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 657,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleAddComment,\n          children: \"Add Comment\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 658,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 638,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 601,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 599,\n    columnNumber: 5\n  }, this);\n}\n_s(AdminDashboard, \"NOWVFR85zoC0yQb7iOO0TDagM1o=\");\n_c = AdminDashboard;\nexport default AdminDashboard;\nvar _c;\n$RefreshReg$(_c, \"AdminDashboard\");","map":{"version":3,"names":["React","useState","useEffect","AdminSidebar","jsxDEV","_jsxDEV","Fragment","_Fragment","AdminDashboard","token","userId","_s","loading","setLoading","error","setError","users","setUsers","tickets","setTickets","openTickets","setOpenTickets","comments","setComments","newComment","setNewComment","editCommentId","setEditCommentId","editCommentText","setEditCommentText","selectedTicketAssign","setSelectedTicketAssign","selectedAgent","setSelectedAgent","availableAgents","setAvailableAgents","activeSection","setActiveSection","profile","setProfile","authHeader","fetch","headers","Authorization","then","res","ok","json","Promise","reject","data","catch","err","finally","filter","t","state","handleAddComment","trim","method","body","JSON","stringify","content","ticket","id","prev","handleEditComment","text","handleUpdateComment","map","c","deleteComment","assignTicket","parseInt","assignedAgent","className","children","onSelect","fileName","_jsxFileName","lineNumber","columnNumber","u","username","role","title","value","onChange","e","target","disabled","a","onClick","email","_c","$RefreshReg$"],"sources":["/home/muskaan/Desktop/Summer_Internship/new/src/AdminDashboard.js"],"sourcesContent":["// import React, { useState, useEffect } from 'react';\n// import AdminSidebar from './AdminSidebar';\n\n// function AdminDashboard({ token, userId }) {\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n//   const [users, setUsers] = useState([]);\n//   const [tickets, setTickets] = useState([]);\n//   const [openTickets, setOpenTickets] = useState([]);\n//   const [comments, setComments] = useState([]);\n//   const [newComment, setNewComment] = useState('');\n//   const [editCommentId, setEditCommentId] = useState(null);\n//   const [editCommentText, setEditCommentText] = useState('');\n//   const [selectedTicketAssign, setSelectedTicketAssign] = useState(null);\n//   const [selectedAgent, setSelectedAgent] = useState(null);\n//   const [availableAgents, setAvailableAgents] = useState([]);\n//   const [showTickets, setShowTickets] = useState(true);\n//   const [activeSection, setActiveSection] = useState('viewUsers');\n//   const [profile, setProfile] = useState(null);\n\n//   useEffect(() => {\n//     console.log(\"useEffect triggered for activeSection:\", activeSection);\n//     if (!token) return;\n//     if (activeSection === 'viewComments') {\n//       console.log(\"Fetching comments for admin view\");\n//       setLoading(true);\n//       const authHeader = `Bearer ${token}`;\n//       // Make a GET request to the comments API endpoint with the authorization header\n//       // This fetches all comments for the admin view\n//       fetch('http://localhost:8080/api/comments/getcomments', {\n//         headers: { Authorization: authHeader }\n//       })\n//         // Check if the response is successful (status code 200-299)\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch comments');\n//           // Parse the response body as JSON\n//           return res.json();\n//         })\n//         .then(data => {\n//           // Update the comments state with the fetched data\n//           setComments(data);\n//           // Clear any previous error messages\n//           setError(null);\n//         })\n//         // Catch and handle any errors during the fetch or processing\n//         .catch(err => setError(err.message))\n//         // Finally, set loading to false to indicate fetch completion\n//         .finally(() => setLoading(false));\n//     } else {\n//       setLoading(true);\n//       const authHeader = `Bearer ${token}`;\n\n//       // Fetch users\n//       fetch('http://localhost:8080/api/users', {\n//         headers: { Authorization: authHeader },\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch users');\n//           return res.json();\n//         })\n//         .then(data => {\n//           setUsers(data);\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message))\n//         .finally(() => setLoading(false));\n\n//       // Fetch tickets\n//       // Make a GET request to the tickets API endpoint with the authorization header\n//       // This fetches all tickets for the admin dashboard\n//       fetch('http://localhost:8080/api/tickets/gettickets', {\n//         headers: { Authorization: authHeader },\n//       })\n//         // Check if the response is successful (status code 200-299)\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch tickets');\n//           // Parse the response body as JSON\n//           return res.json();\n//         })\n//         .then(data => {\n//           // Update the tickets state with the fetched data\n//           setTickets(data);\n//           // Filter tickets with state 'OPEN' and update openTickets state\n//           setOpenTickets(data.filter(ticket => ticket.state === 'OPEN'));\n//           // Clear any previous error messages\n//           setError(null);\n//         })\n//         // Catch and handle any errors during the fetch or processing\n//         .catch(err => setError(err.message))\n//         // Finally, set loading to false to indicate fetch completion\n//         .finally(() => setLoading(false));\n//     }\n//   }, [token, activeSection]);\n\n//   useEffect(() => {\n//     if (activeSection === 'viewProfile' && userId && token) {\n//       setLoading(true);\n//       fetch(`http://localhost:8080/api/users/${userId}`, {\n//         headers: { Authorization: `Bearer ${token}` },\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to fetch profile');\n//           return res.json();\n//         })\n//         .then(data => {\n//           setProfile(data);\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message))\n//         .finally(() => setLoading(false));\n//     }\n//   }, [activeSection, userId, token]);\n\n//   // Fetch all agents\n//   useEffect(() => {\n//     if (!token) return;\n//     const authHeader = `Bearer ${token}`;\n//     fetch('http://localhost:8080/api/users/agents', {\n//       headers: { Authorization: authHeader },\n//     })\n//       .then(res => {\n//         if (!res.ok) throw new Error('Failed to fetch agents');\n//         return res.json();\n//       })\n//       .then(data => {\n//         setAvailableAgents(data);\n//         setError(null);\n//       })\n//       .catch(err => setError(err.message));\n//   }, [token]);\n\n//   // Add a comment\n//   const handleAddComment = () => {\n//     if (newComment.trim() && selectedTicketAssign) {\n//       fetch('http://localhost:8080/api/comments', {\n//         method: 'POST',\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({\n//           content: newComment,\n//           ticket: { id: selectedTicketAssign },\n//         }),\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to add comment');\n//           return res.json();\n//         })\n//         .then(newCommentData => {\n//           setComments(prev => [...prev, newCommentData]);\n//           setNewComment('');\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message));\n//     }\n//   };\n\n//   // Edit comment preparation\n//   const handleEditComment = (commentId, text) => {\n//     setEditCommentId(commentId);\n//     setEditCommentText(text);\n//   };\n\n//   // Update comment\n//   const handleUpdateComment = () => {\n//     if (editCommentText.trim() && editCommentId !== null) {\n//       fetch(`http://localhost:8080/api/comments/${editCommentId}`, {\n//         method: 'PUT',\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ content: editCommentText }),\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to update comment');\n//           return res.json();\n//         })\n//         .then(updatedComment => {\n//           setComments(prev =>\n//             prev.map(comment =>\n//               comment.id === editCommentId ? updatedComment : comment\n//             )\n//           );\n//           setEditCommentId(null);\n//           setEditCommentText('');\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message));\n//     }\n//   };\n\n//   // Delete comment\n//   const deleteComment = (id) => {\n//     fetch(`http://localhost:8080/api/comments/${id}`, {\n//       method: 'DELETE',\n//       headers: { Authorization: `Bearer ${token}` },\n//     })\n//       .then(() => setComments(comments.filter(comment => comment.id !== id)))\n//       .catch(err => setError(err.message));\n//   };\n\n//   // Assign ticket to agent\n//   const assignTicket = () => {\n//     if (selectedTicketAssign && selectedAgent) {\n//       fetch(`http://localhost:8080/api/tickets/${selectedTicketAssign}/assign/${selectedAgent}`, {\n//         method: 'PUT',\n//         headers: {\n//           Authorization: `Bearer ${token}`,\n//           'Content-Type': 'application/json',\n//         },\n//       })\n//         .then(res => {\n//           if (!res.ok) throw new Error('Failed to assign ticket');\n//           setTickets(prev =>\n//             prev.map(ticket =>\n//               ticket.id === parseInt(selectedTicketAssign)\n//                 ? { ...ticket, assignedAgent: { id: parseInt(selectedAgent) } }\n//                 : ticket\n//             )\n//           );\n//           setSelectedTicketAssign(null);\n//           setSelectedAgent(null);\n//           setError(null);\n//         })\n//         .catch(err => setError(err.message));\n//     }\n//   };\n\n//   return (\n//     <div className=\"flex min-h-screen font-poppins bg-gray-100\">\n//       <AdminSidebar onSelect={setActiveSection} />\n//       <main className=\"flex-grow p-8 ml-64 max-w-6xl mx-auto\">\n\n//         {error && <p className=\"text-red-600 mb-4\">{error}</p>}\n\n//         {activeSection === 'viewUsers' && (\n//           <section className=\"mb-8\">\n//             <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Users</h2>\n//             <table className=\"min-w-full bg-white border border-gray-300 rounded\">\n//               <thead>\n//                 <tr>\n//                   <th className=\"border px-4 py-2 text-left\">ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Username</th>\n//                   <th className=\"border px-4 py-2 text-left\">Role</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {users.map(user => (\n//                   <tr key={user.id} className=\"hover:bg-gray-100\">\n//                     <td className=\"border px-4 py-2\">{user.id}</td>\n//                     <td className=\"border px-4 py-2\">{user.username}</td>\n//                     <td className=\"border px-4 py-2 capitalize\">{user.role}</td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n//           </section>\n//         )}\n\n//         {activeSection === 'viewTickets' && (\n//           <>\n//             <section className=\"mb-8\">\n//               <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Tickets (Total: {tickets.length})</h2>\n//               <table className=\"min-w-full bg-white border border-gray-300 rounded\">\n//               <thead>\n//                 <tr>\n//                   <th className=\"border px-4 py-2 text-left\">ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Title</th>\n//                   <th className=\"border px-4 py-2 text-left\">Description</th>\n//                   <th className=\"border px-4 py-2 text-left\">Status</th>\n//                   <th className=\"border px-4 py-2 text-left\">Created By ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Agent ID</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {tickets.map(ticket => (\n//                   <tr key={ticket.id} className=\"hover:bg-gray-100\">\n//                     <td className=\"border px-4 py-2\">{ticket.id}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.title}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.description}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.state}</td>\n//                     <td className=\"border px-4 py-2\">{ticket.createdBy ? ticket.createdBy.id : 'null'}</td>\n//                     <td className=\"border px-4 py-2\">\n//                       {ticket.assignedAgent\n//                         ? ticket.assignedAgent.id\n//                         : ticket.state === 'ASSIGNED'\n//                         ? 'Assigned'\n//                         : 'Unassigned'}\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//               </table>\n//             </section>\n//           </>\n//         )}\n\n//         {activeSection === 'assignTickets' && (\n//           <section className=\"mb-8\">\n//             <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Assign Tickets</h2>\n//             <div className=\"mb-4\">\n//               <label htmlFor=\"ticketSelect\" className=\"block mb-1 font-medium\">Select Ticket</label>\n//               <select\n//                 id=\"ticketSelect\"\n//                 value={selectedTicketAssign || ''}\n//                 onChange={(e) => setSelectedTicketAssign(e.target.value)}\n//                 className=\"border border-gray-300 rounded px-3 py-2 w-full max-w-xs\"\n//               >\n//                 <option value=\"\" disabled>Select a ticket</option>\n//                 {openTickets.map(ticket => (\n//                   <option key={ticket.id} value={ticket.id}>\n//                     {ticket.title} (Assigned to: {ticket.assignedAgent ? ticket.assignedAgent.username : 'Unassigned'})\n//                   </option>\n//                 ))}\n//               </select>\n//             </div>\n//             <div className=\"mb-4\">\n//               <label htmlFor=\"agentSelect\" className=\"block mb-1 font-medium\">Assign to Agent</label>\n//               <select\n//                 id=\"agentSelect\"\n//                 value={selectedAgent || ''}\n//                 onChange={(e) => setSelectedAgent(e.target.value)}\n//                 className=\"border border-gray-300 rounded px-3 py-2 w-full max-w-xs\"\n//               >\n//                 <option value=\"\" disabled>Select an agent</option>\n//                 {availableAgents.map(agent => (\n//                   <option key={agent.id} value={agent.id}>{agent.username}</option>\n//                 ))}\n//               </select>\n//             </div>\n//             <button\n//               onClick={assignTicket}\n//               disabled={!selectedTicketAssign || !selectedAgent}\n//               className=\"bg-blue-600 text-white px-4 py-2 rounded disabled:opacity-50\"\n//             >\n//               Assign Ticket\n//             </button>\n//           </section>\n//         )}\n\n//         {activeSection === 'viewProfile' && (\n//           <section className=\"mb-8 flex flex-col items-center justify-center\">\n//             <h2 className=\"text-3xl font-semibold mb-6 text-blue-800\">Profile</h2>\n//             {loading && <p>Loading profile...</p>}\n//             {error && <p className=\"text-red-600\">{error}</p>}\n//             {profile && (\n//               <div className=\"flex flex-col items-center bg-white p-8 rounded-lg shadow-lg w-full max-w-md\">\n//                 <div className=\"mb-6\">\n//                 <div className=\"w-24 h-24 rounded-full bg-blue-600 flex items-center justify-center shadow-lg mx-auto overflow-hidden\">\n//                   <img\n//                     src=\"download.jpeg\"\n//                     alt=\"Profile Icon\"\n//                     className=\"w-full h-full object-cover\"\n//                   />\n//                 </div>\n//                 </div>\n//                 <div className=\"text-center\">\n//                   <p className=\"text-lg font-medium\"><strong>ID:</strong> {profile.id}</p>\n//                   <p className=\"text-lg font-medium\"><strong>Username:</strong> {profile.username}</p>\n//                   <p className=\"text-lg font-medium\"><strong>Email:</strong> {profile.email}</p>\n//                   <p className=\"text-lg font-medium\"><strong>Role:</strong> {profile.role}</p>\n//                 </div>\n//               </div>\n//             )}\n//           </section>\n//         )}\n\n//         {activeSection === 'viewComments' && (\n//           <section className=\"mb-8\">\n//             <h2 className=\"text-2xl font-semibold mb-4 text-blue-800\">Comments</h2>\n//             <table className=\"min-w-full bg-white border border-gray-300 rounded\">\n//               <thead>\n//                 <tr>\n//                   <th className=\"border px-4 py-2 text-left\">ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Content</th>\n//                   <th className=\"border px-4 py-2 text-left\">Ticket ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">User ID</th>\n//                   <th className=\"border px-4 py-2 text-left\">Actions</th>\n//                 </tr>\n//               </thead>\n//               <tbody>\n//                 {comments.map(comment => (\n//                   <tr key={comment.id} className=\"hover:bg-gray-100\">\n//                     <td className=\"border px-4 py-2\">{comment.id}</td>\n//                     <td className=\"border px-4 py-2\">{comment.content}</td>\n//                     <td className=\"border px-4 py-2\">{comment.ticket ? comment.ticket.id : 'N/A'}</td>\n//                     <td className=\"border px-4 py-2\">{comment.user ? comment.user.id : 'N/A'}</td>\n//                     <td className=\"border px-4 py-2\">\n//                       <button\n//                         onClick={() => handleEditComment(comment.id, comment.content)}\n//                         className=\"bg-yellow-400 text-white px-2 py-1 rounded mr-2\"\n//                       >\n//                         Edit\n//                       </button>\n//                       <button\n//                         onClick={() => deleteComment(comment.id)}\n//                         className=\"bg-red-600 text-white px-2 py-1 rounded\"\n//                       >\n//                         Delete\n//                       </button>\n//                     </td>\n//                   </tr>\n//                 ))}\n//               </tbody>\n//             </table>\n\n//             {editCommentId !== null && (\n//               <div className=\"mt-4\">\n//                 <textarea\n//                   value={editCommentText}\n//                   onChange={(e) => setEditCommentText(e.target.value)}\n//                   className=\"w-full border border-gray-300 rounded p-2\"\n//                   rows={4}\n//                 />\n//                 <button\n//                   onClick={handleUpdateComment}\n//                   className=\"bg-blue-600 text-white px-4 py-2 rounded mt-2\"\n//                 >\n//                   Update Comment\n//                 </button>\n//                 <button\n//                   onClick={() => setEditCommentId(null)}\n//                   className=\"ml-2 bg-gray-400 text-white px-4 py-2 rounded mt-2\"\n//                 >\n//                   Cancel\n//                 </button>\n//               </div>\n//             )}\n//           </section>\n//         )}\n//       </main>\n//     </div>\n//   );\n// }\n\n// export default AdminDashboard;\n\n\nimport React, { useState, useEffect } from 'react';\nimport AdminSidebar from './AdminSidebar';\n\nfunction AdminDashboard({ token, userId }) {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const [users, setUsers] = useState([]);\n  const [tickets, setTickets] = useState([]);\n  const [openTickets, setOpenTickets] = useState([]);\n  const [comments, setComments] = useState([]);\n  const [newComment, setNewComment] = useState('');\n  const [editCommentId, setEditCommentId] = useState(null);\n  const [editCommentText, setEditCommentText] = useState('');\n  const [selectedTicketAssign, setSelectedTicketAssign] = useState(null);\n  const [selectedAgent, setSelectedAgent] = useState(null);\n  const [availableAgents, setAvailableAgents] = useState([]);\n  const [activeSection, setActiveSection] = useState('viewUsers');\n  const [profile, setProfile] = useState(null);\n\n  useEffect(() => {\n    if (!token) return;\n    const authHeader = `Bearer ${token}`;\n\n    if (activeSection === 'viewComments') {\n      setLoading(true);\n      fetch('http://localhost:8080/api/comments/getcomments', {\n        headers: { Authorization: authHeader }\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch comments'))\n        .then(data => {\n          setComments(data);\n          setError(null);\n        })\n        .catch(err => setError(err))\n        .finally(() => setLoading(false));\n    } else {\n      setLoading(true);\n      fetch('http://localhost:8080/api/users', {\n        headers: { Authorization: authHeader },\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch users'))\n        .then(data => setUsers(data))\n        .catch(err => setError(err))\n        .finally(() => setLoading(false));\n\n      fetch('http://localhost:8080/api/tickets/gettickets', {\n        headers: { Authorization: authHeader },\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch tickets'))\n        .then(data => {\n          setTickets(data);\n          setOpenTickets(data.filter(t => t.state === 'OPEN'));\n        })\n        .catch(err => setError(err))\n        .finally(() => setLoading(false));\n    }\n  }, [token, activeSection]);\n\n  useEffect(() => {\n    if (activeSection === 'viewProfile' && userId && token) {\n      setLoading(true);\n      fetch(`http://localhost:8080/api/users/${userId}`, {\n        headers: { Authorization: `Bearer ${token}` },\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch profile'))\n        .then(data => setProfile(data))\n        .catch(err => setError(err))\n        .finally(() => setLoading(false));\n    }\n  }, [activeSection, userId, token]);\n\n  useEffect(() => {\n    if (!token) return;\n    fetch('http://localhost:8080/api/users/agents', {\n      headers: { Authorization: `Bearer ${token}` },\n    })\n      .then(res => res.ok ? res.json() : Promise.reject('Failed to fetch agents'))\n      .then(data => setAvailableAgents(data))\n      .catch(err => setError(err));\n  }, [token]);\n\n  const handleAddComment = () => {\n    if (newComment.trim() && selectedTicketAssign) {\n      fetch('http://localhost:8080/api/comments', {\n        method: 'POST',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          content: newComment,\n          ticket: { id: selectedTicketAssign },\n        }),\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to add comment'))\n        .then(data => {\n          setComments(prev => [...prev, data]);\n          setNewComment('');\n        })\n        .catch(err => setError(err));\n    }\n  };\n\n  const handleEditComment = (id, text) => {\n    setEditCommentId(id);\n    setEditCommentText(text);\n  };\n\n  const handleUpdateComment = () => {\n    if (editCommentText.trim() && editCommentId !== null) {\n      fetch(`http://localhost:8080/api/comments/${editCommentId}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ content: editCommentText }),\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to update comment'))\n        .then(data => {\n          setComments(prev => prev.map(c => c.id === editCommentId ? data : c));\n          setEditCommentId(null);\n          setEditCommentText('');\n        })\n        .catch(err => setError(err));\n    }\n  };\n\n  const deleteComment = id => {\n    fetch(`http://localhost:8080/api/comments/${id}`, {\n      method: 'DELETE',\n      headers: { Authorization: `Bearer ${token}` },\n    })\n      .then(() => setComments(prev => prev.filter(c => c.id !== id)))\n      .catch(err => setError(err));\n  };\n\n  const assignTicket = () => {\n    if (selectedTicketAssign && selectedAgent) {\n      fetch(`http://localhost:8080/api/tickets/${selectedTicketAssign}/assign/${selectedAgent}`, {\n        method: 'PUT',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          'Content-Type': 'application/json',\n        },\n      })\n        .then(res => res.ok ? res.json() : Promise.reject('Failed to assign ticket'))\n        .then(() => {\n          setTickets(prev => prev.map(t => t.id === parseInt(selectedTicketAssign)\n            ? { ...t, assignedAgent: { id: parseInt(selectedAgent) } } : t));\n          setSelectedTicketAssign(null);\n          setSelectedAgent(null);\n        })\n        .catch(err => setError(err));\n    }\n  };\n\n  return (\n    <div className=\"flex min-h-screen font-poppins bg-gray-100\">\n      <AdminSidebar onSelect={setActiveSection} />\n      <main className=\"flex-grow p-8 ml-64 max-w-6xl mx-auto\">\n        {error && <p className=\"text-red-600 mb-4\">{error}</p>}\n\n        {activeSection === 'viewUsers' && (\n          <div><h2>Users</h2><ul>{users.map(u => <li key={u.id}>{u.username} - {u.role}</li>)}</ul></div>\n        )}\n\n        {activeSection === 'viewTickets' && (\n          <div><h2>Tickets</h2><ul>{tickets.map(t => <li key={t.id}>{t.title}</li>)}</ul></div>\n        )}\n\n        {activeSection === 'assignTickets' && (\n          <div>\n            <h2>Assign Tickets</h2>\n            <select value={selectedTicketAssign || ''} onChange={e => setSelectedTicketAssign(e.target.value)}>\n              <option value=\"\" disabled>Select a ticket</option>\n              {openTickets.map(t => <option key={t.id} value={t.id}>{t.title}</option>)}\n            </select>\n            <select value={selectedAgent || ''} onChange={e => setSelectedAgent(e.target.value)}>\n              <option value=\"\" disabled>Select an agent</option>\n              {availableAgents.map(a => <option key={a.id} value={a.id}>{a.username}</option>)}\n            </select>\n            <button onClick={assignTicket}>Assign</button>\n          </div>\n        )}\n\n        {activeSection === 'viewProfile' && profile && (\n          <div>\n            <h2>Profile</h2>\n            <p>ID: {profile.id}</p>\n            <p>Username: {profile.username}</p>\n            <p>Email: {profile.email}</p>\n            <p>Role: {profile.role}</p>\n          </div>\n        )}\n\n        {activeSection === 'viewComments' && (\n          <div>\n            <h2>Comments</h2>\n            <ul>\n              {comments.map(c => (\n                <li key={c.id}>\n                  {editCommentId === c.id ? (\n                    <>\n                      <textarea value={editCommentText} onChange={e => setEditCommentText(e.target.value)} />\n                      <button onClick={handleUpdateComment}>Update</button>\n                    </>\n                  ) : (\n                    <>\n                      {c.content} <button onClick={() => handleEditComment(c.id, c.content)}>Edit</button>\n                    </>\n                  )}\n                  <button onClick={() => deleteComment(c.id)}>Delete</button>\n                </li>\n              ))}\n            </ul>\n            <textarea value={newComment} onChange={e => setNewComment(e.target.value)} />\n            <button onClick={handleAddComment}>Add Comment</button>\n          </div>\n        )}\n      </main>\n    </div>\n  );\n}\n\nexport default AdminDashboard;"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}